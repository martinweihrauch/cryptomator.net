
Let's summarize the vault layout:

```
[VAULT_ROOT]/
├── masterkey.cryptomator  (Encrypted JSON containing vault keys and parameters)
├── d/                     (Directory for data files and subdirectories)
│   ├── XX/                (Shard: first 2 chars of hashed dirId)
│   │   └── YYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/ (Remainder of hashed dirId)
│   │       ├── dir.uvf                      (Encrypted metadata for this directory)
│   │       ├── (encrypted_file1.uvf)      (Encrypted file)
│   │       ├── (encrypted_file2.uvf)      (Encrypted file)
│   │       └── ZZZ.../                    (Subdirectory, following the same XX/YYY... pattern)
│   │           └── dir.uvf                  (Encrypted metadata for subdirectory ZZZ...)
│   │           └── ...
│   └── ...                (Other shards)
└── ...                    (Potentially other top-level vault files/dirs, though 'd' seems primary for content)
```

**Explanation:**

1.  **`masterkey.cryptomator`**:
    *   Located at the root of the vault.
    *   This file is crucial. It's an encrypted JSON file containing the vault's master encryption keys and parameters (like KDF type, salts, seeds for key revisions).
    *   It's decrypted using the user's passphrase. The derived keys are then used for all cryptographic operations within the vault.
    *   It supports key "revisions," allowing for masterkey components (seeds) to be updated over time.

2.  **The `d/` directory**:
    *   This is the main directory where all encrypted user data (files and other directories) is stored.

3.  **Sharded Directories (e.g., `d/XX/YYYY.../`)**:
    *   Inside `d/`, directories are not stored with their plain names. Instead, each directory in the vault has a unique `dirId`.
    *   This `dirId` is cryptographically hashed.
    *   The encrypted representation of a directory is stored in a path derived from this hash: `d/<first_2_chars_of_hash>/<remaining_chars_of_hash>/`.
    *   This sharding helps distribute directories and avoid issues with very large numbers of entries in a single directory at the filesystem level.

4.  **`dir.uvf`**:
    *   Inside each of these sharded directory paths (e.g., `d/XX/YYYY.../`), there's a file named `dir.uvf`.
    *   This file contains the encrypted metadata for that specific directory.
    *   Crucially, it stores the directory's `dirId` (which is needed to decrypt its name if it's a subdirectory, and to locate its children) and the `seedId` (masterkey revision) used for encrypting its contents (filenames and file content/headers within this directory).
    *   It is 128 bytes long (when encrypted).

5.  **Encrypted Files (e.g., `encrypted_file.uvf`)**:
    *   Actual files stored in the vault are encrypted.
    *   Their filenames are encrypted using a key derived from the parent directory's `dirId` and the relevant masterkey seed revision (obtained from the parent's `dir.uvf`).
    *   The encrypted filename gets a `.uvf` extension.
    *   The file *content* is also encrypted. File encryption involves a file header (also encrypted, containing nonces, etc.) and then encrypted chunks of data.

**Flow for accessing a file (simplified):**

1.  **Unlock Vault**: User provides passphrase. `masterkey.cryptomator` is decrypted, loading the `UVFMasterkey`.
2.  **Root Directory**: The `rootDirId` is derived from the masterkey. Its path (e.g., `d/AA/BB.../`) is calculated. The `dir.uvf` in this path is decrypted to get root directory metadata.
3.  **Navigate to Subdirectory (e.g., `/MyFolder/`)**:
    *   To find `MyFolder` inside the root: Encrypt "MyFolder" (using root's `dirId` and seed). The result is the encrypted filename (e.g., `ENCRYPTED_MYFOLDER.uvf`).
    *   Locate `ENCRYPTED_MYFOLDER.uvf`. This is actually another directory's `dir.uvf` (or rather, the path to it is derived from its `dirId`). For a file, it would be an encrypted file.
    *   To resolve a path like `/MyFolder/MyFile.txt`:
        *   The `dir.uvf` of the current directory is decrypted. This gives you its `dirId` and `seedId`.
        *   The next path component ("MyFolder") has its name encrypted using this `dirId` and `seedId`. This gives you the *encrypted name* of the "MyFolder" directory on disk.
        *   From this encrypted name, which is actually a pointer to another `dir.uvf` if "MyFolder" is a directory, you find its physical path (e.g. `d/CC/DD.../dir.uvf`).
        *   Decrypt `d/CC/DD.../dir.uvf` to get the `dirId` and `seedId` for "MyFolder".
4.  **Access File (e.g., `MyFile.txt` in `MyFolder`)**:
    *   Encrypt "MyFile.txt" using "MyFolder"'s `dirId` and `seedId`. This gives `ENCRYPTED_MYFILE.uvf`.
    *   This `ENCRYPTED_MYFILE.uvf` is located within `d/CC/DD.../`.
    *   Decrypt the header of `ENCRYPTED_MYFILE.uvf`, then decrypt its content.

This structure ensures that both filenames and file contents are confidential, and directory structures are obfuscated. The `masterkey.cryptomator` is the entry point, and `dir.uvf` files act as nodes in the encrypted directory tree.




You're asking for a deeper explanation of how the encrypted directory paths are formed, specifically the "first 2 characters" part. Let's break it down:

**1. Hashed Directory ID (`dirId`)**

*   Every directory you create in your vault (let's say you create `/MyPictures/` and then `/MyPictures/Holidays/`) gets its own unique identifier called a `dirId`. This is a random 32-byte value.
*   This `dirId` is then processed by a hashing function. Based on the Java code (specifically `FileNameCryptorImpl.java`'s `hashDirectoryId` method), this involves an HMAC-SHA256 operation, and then the result is Base32 encoded to produce a string. Let's imagine for a directory, its `dirId` after hashing and encoding becomes something like: `A4XKERD36N4F2HJJJ25GZ6C6XGZL2QQR` (this is just an example).

**2. Creating the Physical Path: The "First 2 Characters"**

*   To decide where to physically store this directory's information (like its `dir.uvf` file and any encrypted files *inside* it) on your hard drive, Cryptomator/UVF takes this hashed string:
    `A4XKERD36N4F2HJJJ25GZ6C6XGZL2QQR`
*   It splits it:
    *   The **first two characters**: `A4`
    *   The **rest of the characters**: `XKERD36N4F2HJJJ25GZ6C6XGZL2QQR`
*   It then creates a path structure like this within your vault's storage:
    `[VAULT_ROOT]/d/A4/XKERD36N4F2HJJJ25GZ6C6XGZL2QQR/`
*   The `dir.uvf` file for this specific directory, and all encrypted files/subdirectories immediately contained within this logical directory, will be stored inside this `d/A4/XKERD36N4F2HJJJ25GZ6C6XGZL2QQR/` folder.

**3. What About Subdirectories? Do They Also Have a 2-Character Dir?**

*   **Yes, they do.** The exact same process applies to every single directory and subdirectory within your vault.
*   Let's say you have:
    *   Logical Root (`/`)
    *   Subdirectory `MyFolder` (`/MyFolder/`)
    *   Sub-subdirectory `MyDocs` (`/MyFolder/MyDocs/`)

*   Each of these will have its own unique `dirId`.
*   Each `dirId` will be hashed independently.
*   Let's imagine their hashed `dirId`s are:
    *   Root (`/`): `R1OOTHAASH...`
    *   `MyFolder`: `M2YFOLDERHAASH...`
    *   `MyDocs`: `D3OCSHAASH...`

*   Their physical storage paths under `d/` would be:
    *   Root (`/`): `d/R1/OOTHAASH.../dir.uvf`
    *   `MyFolder`: `d/M2/YFOLDERHAASH.../dir.uvf`
    *   `MyDocs`: `d/D3/OCSHAASH.../dir.uvf`

**Visualizing It:**

```
LOGICAL VIEW (what you see):
/
├── MyFolder/
│   └── MyDocs/
│       └── report.txt
└── AnotherFolder/
    └── image.jpg

PHYSICAL STORAGE (simplified, inside [VAULT_ROOT]/d/):
d/
├── R1/                     (Corresponds to Logical Root)
│   └── OOTHAASH.../
│       ├── dir.uvf         (Metadata for Root)
│       ├── (encrypted name of MyFolder.uvf, which is actually a pointer to its dir.uvf)
│       └── (encrypted name of AnotherFolder.uvf, pointer)
│
├── M2/                     (Corresponds to MyFolder)
│   └── YFOLDERHAASH.../
│       ├── dir.uvf         (Metadata for MyFolder)
│       └── (encrypted name of MyDocs.uvf, pointer)
│
├── D3/                     (Corresponds to MyDocs)
│   └── OCSHAASH.../
│       ├── dir.uvf         (Metadata for MyDocs)
│       └── (encrypted name of report.txt.uvf)
│
├── A6/                     (Corresponds to AnotherFolder, assuming hash starts with A6)
│   └── NOTHERFOOLDER.../
│       ├── dir.uvf         (Metadata for AnotherFolder)
│       └── (encrypted name of image.jpg.uvf)
└── ... (other 2-character shard directories)
```

**Why is it done this way? (Sharding)**

This `d/XX/YYYY...` structure is a technique called **sharding**.

*   **Performance**: If you had thousands of encrypted files and directories, putting them all directly into a single `d/` folder could make filesystem operations (like listing files, creating new ones) very slow on some operating systems or filesystems.
*   **Organization**: By splitting them based on the first two characters of their hash, the items are distributed across a manageable number of top-level "shard" directories (e.g., `AA/`, `AB/`, ... `ZZ/`, `00/`, `01/` ... `99/` etc., depending on the Base32 character set). Within each of these, the number of items is smaller.

**Key Takeaway:**

The "2 character dir" is determined *independently* for each directory based on *its own* hashed `dirId`. The hierarchical relationship you see in your vault (e.g., `MyDocs` being inside `MyFolder`) is not represented by nesting these `d/XX/YYY...` folders. Instead, that logical hierarchy is maintained by the encrypted metadata within the `dir.uvf` files, which essentially contain pointers to the `dirId` (and thus the hashed path) of their children.
